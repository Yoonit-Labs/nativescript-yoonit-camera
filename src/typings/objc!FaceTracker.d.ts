/**
 * File generated by this command in the demo-vue project:
 * TNS_TYPESCRIPT_DECLARATIONS_PATH="$(pwd)/typings" tns build ios
 */

interface CameraEventListenerDelegate {

    onFaceImageCreatedWithCountTotalImagePath(count: number, total: number, imagePath: string): void;

    onFaceDetectedWithXYWidthHeight(x: number, y: number, width: number, height: number): void;

    onFaceUndetected(): void;

    onEndCapture(): void;

    onErrorWithError(error: string): void;

    onMessageWithMessage(message: string): void;

    onPermissionDenied(): void;

    onBarcodeScannedWithContent(content: string): void;

    onFrameImageCreatedWithCountTotalImagePath(count: number, total: number, imagePath: string): void;
}

declare var CameraEventListenerDelegate: {

    prototype: CameraEventListenerDelegate;
};

declare class CameraView extends UIView {

    static alloc(): CameraView; // inherited from NSObject

    static appearance(): CameraView; // inherited from UIAppearance

    static appearanceForTraitCollection(trait: UITraitCollection): CameraView; // inherited from UIAppearance

    static appearanceForTraitCollectionWhenContainedIn(trait: UITraitCollection, ContainerClass: typeof NSObject): CameraView; // inherited from UIAppearance

    static appearanceForTraitCollectionWhenContainedInInstancesOfClasses(trait: UITraitCollection, containerTypes: NSArray<typeof NSObject> | typeof NSObject[]): CameraView; // inherited from UIAppearance

    static appearanceWhenContainedIn(ContainerClass: typeof NSObject): CameraView; // inherited from UIAppearance

    static appearanceWhenContainedInInstancesOfClasses(containerTypes: NSArray<typeof NSObject> | typeof NSObject[]): CameraView; // inherited from UIAppearance

    static new(): CameraView; // inherited from NSObject

    cameraEventListener: CameraEventListenerDelegate;

    getCameraLens(): number;

    setFaceDetectionBoxWithFaceDetectionBox(faceDetectionBox: boolean): void;

    setFaceImageSizeWithWidthHeight(width: number, height: number): void;

    setFaceNumberOfImagesWithFaceNumberOfImages(faceNumberOfImages: number): void;

    setFacePaddingPercentWithFacePaddingPercent(facePaddingPercent: number): void;

    setFaceTimeBetweenImagesWithFaceTimeBetweenImages(faceTimeBetweenImages: number): void;

    setFrameNumberOfImagesWithFrameNumberOfImages(frameNumberOfImages: number): void;

    setFrameTimeBetweenImagesWithFrameTimeBetweenImages(frameTimeBetweenImages: number): void;

    setFaceCaptureMinSizeWithFaceCaptureMinSize(faceCaptureMinSize: number): void;

    setFaceCaptureMaxSizeWithFaceCaptureMaxSize(faceCaptureMaxSize: number): void;

    startCaptureTypeWithCaptureType(captureType: string): void;

    startPreview(): void;

    stopCapture(): void;

    toggleCameraLens(): void;
}
